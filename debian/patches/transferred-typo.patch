Description: Fix 'transfered' typo, replace with 'transferred'.
Author: Bas Couwenberg <sebastic@xs4all.nl>

--- a/lib/init/variables.html
+++ b/lib/init/variables.html
@@ -259,7 +259,7 @@ PERMANENT
     non-native, vector features are written to output external
     datasource immediately. By default, the vector library writes
     output data to a temporary vector map in native format and when
-    closing the map, the features are transfered to output external
+    closing the map, the features are transferred to output external
     datasource. Note: if output vector format is topological PostGIS
     format, then the vector library writes features immediately to output
     database (in this case GRASS_VECTOR_EXTERNAL_IMMEDIATE is ignored).</dd>
--- a/lib/python/temporal/temporal_algebra.py
+++ b/lib/python/temporal/temporal_algebra.py
@@ -1798,7 +1798,7 @@ class TemporalAlgebraParser(object):
             tfunc = gvar.tfunc.upper()
             # Get value for function name from dictionary.
             tfuncval = tfuncdict[tfunc]
-            # Check if value has to be transfered to datetime object for comparison.
+            # Check if value has to be transferred to datetime object for comparison.
             if tfunc in ["START_DATE", "END_DATE"]:
                 timeobj = datetime.strptime(value.replace("\"",""), '%Y-%m-%d')
                 value = timeobj.date()
--- a/lib/vector/Vlib/open.c
+++ b/lib/vector/Vlib/open.c
@@ -1304,7 +1304,7 @@ int map_format(struct Map_info *Map)
         else {
             /* vector features are written to the temporary vector map
              * in the native format and when closing the map
-             * transfered to output OGR layer */
+             * transferred to output OGR layer */
             format = GV_FORMAT_NATIVE;
             Map->temporary = TRUE;
         }
@@ -1421,7 +1421,7 @@ int map_format(struct Map_info *Map)
             else {
                 /* vector features are written to the temporary vector map
                  * in the native format and when closing the map
-                 * transfered to output PostGIS layer */
+                 * transferred to output PostGIS layer */
                 format = GV_FORMAT_NATIVE;
                 Map->temporary = TRUE;
             }
--- a/lib/vector/diglib/spindex_rw.c
+++ b/lib/vector/diglib/spindex_rw.c
@@ -659,8 +659,8 @@ int rtree_dump_node_file(FILE * fp, off_
  * all following methods to transfer spatial indices (rtrees) are based
  * on the same idea
  * do a postorder depth-first non-recursive traversal of the rtree
- * a leaf node is transfered first
- * the root node is transfered last
+ * a leaf node is transferred first
+ * the root node is transferred last
  * 
  * this applies to all four scenarios
  * - from intermediate file to sidx file
@@ -973,7 +973,7 @@ static void rtree_load_to_memory(struct
 	loadnode = 1;
 	/* this is an internal node in the RTree
 	 * all its children are read first,
-	 * before it is transfered to the RTree in memory */
+	 * before it is transferred to the RTree in memory */
 	if (s[top].sn.level > 0) {
 	    for (i = s[top].branch_id; i < t->nodecard; i++) {
 		if (s[top].pos[i] > 0) {
@@ -991,7 +991,7 @@ static void rtree_load_to_memory(struct
 			/* leaf node
 			 * vector object IDs are stored in file as
 			 * off_t but always fit into an int, see dig_structs.h
-			 * vector object IDs are transfered to child.id */
+			 * vector object IDs are transferred to child.id */
 			if (s[top].sn.level == 0) {
 			    s[top].sn.branch[j].child.id =
 				(int)s[top].pos[j];
@@ -1098,7 +1098,7 @@ static void rtree_load_to_file(struct gv
 	loadnode = 1;
 	/* this is an internal node in the RTree
 	 * all its children are read first,
-	 * before it is transfered to the RTree in memory */
+	 * before it is transferred to the RTree in memory */
 	if (s[top].sn.level > 0) {
 	    for (i = s[top].branch_id; i < t->nodecard; i++) {
 		if (s[top].pos[i] > 0) {
@@ -1116,7 +1116,7 @@ static void rtree_load_to_file(struct gv
 			/* leaf node
 			 * vector object IDs are stored in file as
 			 * off_t but always fit into an int, see dig_structs.h
-			 * vector object IDs are transfered to child.id */
+			 * vector object IDs are transferred to child.id */
 			if (s[top].sn.level == 0) {
 			    s[top].sn.branch[j].child.id =
 				    (int)s[top].pos[j];
--- a/raster/r.watershed/shed/com_line.c
+++ b/raster/r.watershed/shed/com_line.c
@@ -4,7 +4,7 @@
 #include "watershed.h"
 #include "string.h"
 
-/* make sure any useful info is transfered to the man page before ripping out the interactive help messages */
+/* make sure any useful info is transferred to the man page before ripping out the interactive help messages */
 /* in addition there seem to be some useful user options here which are not currently available from the main parser */
 int com_line_Gwater(INPUT * input, OUTPUT * output)
 {
