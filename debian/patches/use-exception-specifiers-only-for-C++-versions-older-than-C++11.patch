Description: Use exception specifiers only for C++ versions older than C++11.
 .
 Tested using GCC 5.2.1.
 .
 No exception specifiers (throw(...)) fail with -std=c++98 -fexceptions.
 Omitting noexcept (or throw()) fails with -std=c++11 and -std=c++14.
 .
 Using cplusplus to get C++ standard version which defines
 how the definitions in the standard library look like
 and using GRASS_MM_USE_EXCEPTION_SPECIFIER we then use the right ones.
 .
 This contains old fix for -fexceptions with GCC 4.7 (see #1533, r50130)
 and new fix for GCC 6 where -std=gnu++14 is by default (see #2871
 and Debian Bug 811886).
 .
 Works also with clang++ -std=c++14.
Author: Vaclav Petras <wenzeslaus@gmail.com>
Origin: https://trac.osgeo.org/grass/changeset/68818
Bug: https://trac.osgeo.org/grass/ticket/2871
Bug-Debian: https://bugs.debian.org/811886

--- a/include/iostream/mm.h
+++ b/include/iostream/mm.h
@@ -39,6 +39,11 @@
 
 #include <sys/types.h>
 
+// GCC with C++98 and -fexceptions requires exception
+// specifiers, however with C++11 and newer, using them causes an error.
+#if __cplusplus < 201103L
+#define GRASS_MM_USE_EXCEPTION_SPECIFIER
+#endif /* __cplusplus < 201103L */
 
 #define MM_REGISTER_VERSION 2
 
@@ -128,10 +133,17 @@ public:
   void print();
 
   friend class mm_register_init;
-  friend void * operator new(size_t) throw(std::bad_alloc);
-  friend void * operator new[](size_t) throw(std::bad_alloc);
+#ifdef GRASS_MM_USE_EXCEPTION_SPECIFIER
+  friend void * operator new(size_t) throw (std::bad_alloc);
+  friend void * operator new[] (size_t) throw (std::bad_alloc);
   friend void operator delete(void *) throw();
   friend void operator delete[](void *) throw();
+#else
+  friend void * operator new(size_t);
+  friend void * operator new[] (size_t);
+  friend void operator delete(void *) noexcept;
+  friend void operator delete[](void *) noexcept;
+#endif /* GRASS_MM_USE_EXCEPTION_SPECIFIER */
 };
 
 
--- a/lib/iostream/mm.cpp
+++ b/lib/iostream/mm.cpp
@@ -276,7 +276,11 @@ MM_err MM_register::register_deallocatio
 
  
 /* ************************************************************ */
-void* operator new[] (size_t sz) throw(std::bad_alloc) {
+#ifdef GRASS_MM_USE_EXCEPTION_SPECIFIER
+void* operator new[] (size_t sz) throw (std::bad_alloc) {
+#else
+void* operator new[] (size_t sz) {
+#endif /* GRASS_MM_USE_EXCEPTION_SPECIFIER */
   void *p;
   
   MM_DEBUG cout << "new: sz=" << sz << ", register " 
@@ -327,7 +331,11 @@ void* operator new[] (size_t sz) throw(s
 
  
 /* ************************************************************ */
-void* operator new (size_t sz) throw(std::bad_alloc) {
+#ifdef GRASS_MM_USE_EXCEPTION_SPECIFIER
+void* operator new (size_t sz) throw (std::bad_alloc) {
+#else
+void* operator new (size_t sz) {
+#endif /* GRASS_MM_USE_EXCEPTION_SPECIFIER */
   void *p;
   
   MM_DEBUG cout << "new: sz=" << sz << ", register " 
@@ -379,7 +387,11 @@ void* operator new (size_t sz) throw(std
 
 
 /* ---------------------------------------------------------------------- */
+#ifdef GRASS_MM_USE_EXCEPTION_SPECIFIER
 void operator delete (void *ptr) throw() {
+#else
+void operator delete (void *ptr) noexcept {
+#endif /* GRASS_MM_USE_EXCEPTION_SPECIFIER */
   size_t sz;
   void *p;
   
@@ -419,7 +431,11 @@ void operator delete (void *ptr) throw()
 
 
 /* ---------------------------------------------------------------------- */
+#ifdef GRASS_MM_USE_EXCEPTION_SPECIFIER
 void operator delete[] (void *ptr) throw() {
+#else
+void operator delete[] (void *ptr) noexcept {
+#endif /* GRASS_MM_USE_EXCEPTION_SPECIFIER */
   size_t sz;
   void *p;
   
